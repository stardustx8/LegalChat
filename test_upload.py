#!/usr/bin/env python3
import requests
import base64
import json
import sys

# Create a simple test DOCX file content (minimal DOCX structure)
# This is a minimal valid DOCX file
docx_hex = "504b03041400000008000000210062ee9d48510100001c050000130000005b436f6e74656e745f54797065735d2e786d6cad944d4ec3301085f748dc24484a295248480a546e1c500515c18244626b3bc329e38c841e89848de3b92333f3d47e7a693d737ac901064d92e5494e6e81e90ac92b17bd9bf70222c9f7eb15a6dc1df5e5ed6e12d3a087e8a289cb082930ab689e7457a5a5f545a962b91626912e9002c7241690a625f12c604e24aa5675658e7eeafc5be6d6ce838df8e8049ae088e01504b03041400000008000000210083bc0dec880100001802000011000000776f72642f646f63756d656e742e786d6ca5934f4bc3401cc5bf4a294eb15a6c9382e0a17817f1205e441411114445c49a993669269de926bbddf842a43e80078fc14b8ff0e42349d333eccdcc7b33efbd77337302c172e6f98c16cc6b590959515d1e8e87dbb364b9bbbbfb7e7afd7c321c3b018b29cc9a5322b984eb30ba59494a42cc8450ae5a3c2e24146aa4266e7c2a872269793a942c13219bb8a922e5a9985e8bdc2beb0aba5c5a4856e98e37d76c673c73e331c0f063e1c7e3af0bbfc74f8693fe68ffa4ff1d331cd0d37c3ed703e94d27e701fb439c9e3f1d87a3c9e4c8e27c3f119ced17c320e71f7c6acd0f72e936e1e1e77b4ea0db9fa7dd1eb09c6b6df1b6cdde8ae38b5e7afd47bf43e08fa7c6e1344e8d69b1e81f23451ae5b6dc8e8ede3e8e83db7770f9c16f82a31797e44aed256540f547555db56e1f3e21c8f8e8e8ecb0f504b0304140000000800000021009b8a24b2e40000004f0100000c000000776f72642f5f72656c732f2e72656c73ad90414bc340109c77c85ee8a4f614c1e8a5579e420f222278494949a5287210b15ec6cdde17f0e23b6ef19af7766f666736e074dcfa946145165497cb0522ac1ed2c8d2eee95714c5e1e6a94e530312d2a052b0354d45091a626b212258e127245d262f2c38f4d5e39dfb34749fb13f40f9f0bb9c073cc55f38e11abd2c6ce5312e73c0476c8a16ee825ba5655373797ef565f75593754b24a4a92aa5e9a1e9a9173b521504b03041400000008000000210051dd6bb873020000540500000b000000776f72642f7374796c65732e786d6cb5544d6bdb4010bd0bbef315721dc74dc3b4c93a04c8216407974ad2c48e1ed959d2aecb5e7629819cb6ffbd9a388ea3f84b0e96a03d33f366e6bd199d9d9d8ef02e52955eb1a2b6a628ebacda962a332db666f36aee0f0f878f9f3f3e66c5e2ca6296d59d3256eb5cd58a06abd5c56ebaa552b172c1c1f3ebf3f3c3c7c06833a9ae17099dcb6cdc74b1725a955f3e5f29b15c396dd5b0d9dcdb58a95beaeb3ce56dd65aa6e6e16e76e7bc60db1d036bbbce9c9fb6cc76e6aec5b65bb969b376edb3959ee9fa769f76db96e27b6e6fc73e2767e26767676fe6e6e6e6efe6f6fcf07939f4e0e1e7c383d373870f0e4fdfc0c1c1e981898103068e3c67ed98a15346f0e0e7870f274e9c3e69fdf8e141f3871f8e3e7c60e0c801234e1e3972e208193dfc68f4e9a3833b3378f5b2e7cf3e6870f7bb7fefa2e97f1e10dd2e21d8e5045bb2d0964cef2045bb3210969ca34b97f044be088fd1d810bf9e21f890e3dfef9036f067a7a8e960eb0bc6f7b067a8ee1e91b38dc7e8fb0b783d80bf88f8df08700e40c813f01f7b9d3e0e90e784ba067a8e81f5067abee1f50e7ef8bba1f3067a71ef79f3e3077a76ee7ab8e980d3bdde8fb0bbafe1eb02eee1f79b8e0eb03f467a7abeee1e90b74eeeeceed9d835e8e7a8ef4dccccdce4ecee1bab7f6be6bb83ee1e91e734b8ede0e93338c11e0c783334f47e20e60cf5cf3e3971eac2e4074e8e5f5f3e393b707272dcdbdbe1f30deeede1bbdddd5c0f0f879b83c2e1d5c2e141e5700bc3c9c9d185e3933373738727a71e3e1c3dbebe3e3973f3e5ebeb939bd1fd0e1f0f0303b703d7afae8ecebb38fbfbfb93cb7876ee6e1e3c3a70707e767c71e3c3b78746ddcc0c3b7c1d5c1e5c9b7874f4e4fcfaedcdcdc4e5c3e7b3a3c3d7976e3ecf26970e3e263a30e473f1e753c3c3a3e7ffa8ce91f3e3ef73f804f03504b0304140000000800000021008b3ac4733a010000ee01000010000000776f72642f77656273657474696e67732e786d6c9d913d4b033114c7dfc5d0359bb4da4141e8e056848ed652e8d022289e1a3993db10c9e4dc0bd58ff02b04c145b0b04fc097d23a88838bbe1cf7bcff734297032dc0abd1285e47e7f06464e7602cd86df7f36db787676797bb332ec023ec96db7af7f66e67dc37ebf8d5ba76ab5b369ba38dc76bedbada583e582e5c6fa3e8a24e3e3eff2e0be2284e628b2b8e23abd088ac89b62a699522d62a0851a1145b1da514461a7c654de42c514b8e10b8e18a082e9cc062c8540409f093248e2e090a962a8fd006c502d13354ad106210e1c039b94c604a92c9e73ac985629a079a03c948e1040e3e214cf0e8a98e2de7f0c9a52f1ae2fc26ee96c65f96b4c01c37c8c69f2ddfd59e8a43bb87f227e927fdb3fdf0dfca3fac6df99fb9ebdb34c039e66e009bfb979504b03041400000008000000210000000000000000000000000012000000776f72642f666f6e745461626c652e786d6c504b0304140000000800000021005dd192ad6a0100004403000014000000776f72642f77656273657474696e67732e786d6ca593c14adc401086cf2af313424b76939d5c5876939d2084104463456c87ee43eb98d9d9ea86746775d9f82a82afa0fb0278117141bc78119dcaccc337efcd379969d926b4044ccf4da1a1f9f2fddbdded76bfef76b6fef67bf377bbdbf5daff5e8f86c5cbbc7e7e7f3cb87abe5eab66d5bb5eed7ba753cdeff36b6db5b5d8db37dedce7e5cfccccfee9c9f5eb93c5f7c9695545545e8ac45452e44ad74a95e09b92b5dcb9528d18aa5b552d96a956bb962a558d58ad5ad2255abd56c558c2bb54a1a15a2a55ab945aa162b550b6b954bd54aab562359514a9d856b554bd58c55a1e12a5d59aa4626558bb8cad67295a0562d16a7e96ab94c3029159ac97ab945a0a96915ac17ab51268c8595255b24b52b3942296a15c9c24a89c10a494b5b24b52b394229715d9c245f291d2d05a90b59a9d4329655cac17ab91268c8595255a2435236a558bb5424ba5426a85d4123d121a5926a24358a3d4c84a54abc8d652eb4a05a9415825e1215e0fe3700f6feebe1def8a9f8177e163f36fe853ff89f89e75f93f83138a7f50a00d07e8ebcac1a1af37f80cf473d7e5e5f5ef4eb7f013c3c01a3c127f097e06c00fffb5e5e5e5f01504b0304140000000800000021009b8a24b2e40000004f0100000c0000005f72656c732f2e72656c73ad90414bc340109c77c85ee8a4f614c1e8a5579e420f222278494949a5287210b15ec6cdde17f0e23b6ef19af7766f666736e074dcfa946145165497cb0522ac1ed2c8d2eee95714c5e1e6a94e530312d2a052b0354d45091a626b212258e127245d262f2c38f4d5e39dfb34749fb13f40f9f0bb9c073cc55f38e11abd2c6ce5312e73c0476c8a16ee825ba5655373797ef565f75593754b24a4a92aa5e9a1e9a9173b521504b0304140000000800000021000dd1909fb60000001c0100001c000000776f72642f5f72656c732f646f63756d656e742e786d6c2e72656c73a58f4d0ac2301484f78c43dcd9420510b9761da4208820a2828aa87511bc8b0dbbebe01de87a02f709dc05339cdc9872a6205bb42e84421ba93856d6354b1a1e965997ce6d05a9c588612e42966474c844677f4ab075667b6a6b48d139b2d823c3ebf7178d87e053c16504b010214001400000008000000210062ee9d48510100001c0500001300000000000000000000008481000000005b436f6e74656e745f54797065735d2e786d6c504b010214001400000008000000210083bc0dec880100001802000011000000000000000000000084819201000000776f72642f646f63756d656e742e786d6c504b0102140014000000080000002100000000000000000000000000120000000000000000200000004a03000000776f72642f666f6e745461626c652e786d6c504b0102140014000000080000002100000000000000000000000000140000000000000000200000007a03000000776f72642f77656273657474696e67732e786d6c504b01021400140000000800000021009b8a24b2e40000004f0100000c0000000000000000000000008481ac03000000776f72642f5f72656c732f2e72656c73504b01021400140000000800000021009b8a24b2e40000004f0100000c00000000000000000000000084819a0400005f72656c732f2e72656c73504b010214001400000008000000210000dd192ad6a0100004403000014000000000000000000000084819805000000776f72642f77656273657474696e67732e786d6c504b0102140014000000080000002100dd1909fb60000001c0100001c000000000000000000000084811407000000776f72642f5f72656c732f646f63756d656e742e786d6c2e72656c73504b05060000000006000600d00100008e0800000000"
docx_bytes = bytes.fromhex(docx_hex)

# Base64 encode the file
file_data_b64 = base64.b64encode(docx_bytes).decode('utf-8')

# Prepare the request payload
payload = {
    "filename": "AE.docx",
    "file_data": file_data_b64
}

# Function App URL
url = "https://legaldocs-processor-djefd2eygvcugdgz.westeurope-01.azurewebsites.net/api/upload_blob"

try:
    print(f"Uploading to: {url}")
    print(f"Payload size: {len(json.dumps(payload))} bytes")

    # Send the request
    response = requests.post(url, json=payload, timeout=30)

    print(f"Status Code: {response.status_code}")
    print(f"Response: {response.text}")
    
    if response.status_code == 200:
        print("\n✅ Upload successful!")
    else:
        print("\n❌ Upload failed!")
        sys.exit(1)

except Exception as e:
    print(f"Error: {str(e)}")
    import traceback
    traceback.print_exc()
    sys.exit(1)
